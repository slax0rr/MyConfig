list

(PHP 4, PHP 5, PHP 7)

list â€” Assign variables as if they were an array

==============================================================================
*Description*

    array list ( mixed $var1 [, mixed $... ] )~

Like |array|, this is not really a function, but a language construct. list()
is used to assign a list of variables in one operation.

==============================================================================
*Parameters*

{var1}

    A variable.

==============================================================================
*Return* *Values*

Returns the assigned array.

==============================================================================
*Changelog*

Version                              Description
7.0.0   The order that the assignment operations are performed in has changed.
7.0.0   list() expressions can no longer be completely empty.
7.0.0   Strings can no longer be unpacked.

==============================================================================
*Examples*

Example #1 list() examples

<?php >

    $info = array('coffee', 'brown', 'caffeine');

    // Listing all the variables
    list($drink, $color, $power) = $info;
    echo "$drink is $color and $power makes it special.\n";

    // Listing some of them
    list($drink, , $power) = $info;
    echo "$drink has $power.\n";

    // Or let's skip to only the third one
    list( , , $power) = $info;
    echo "I need $power!\n";

    // list() doesn't work with strings
    list($bar) = "abcde";
    var_dump($bar); // NULL
<?>

Example #2 An example use of list()

<table>
 <tr>
  <th>Employee name</th>
  <th>Salary</th>
 </tr>

<?php >
    $result = $pdo->query("SELECT id, name, salary FROM employees");
    while (list($id, $name, $salary) = $result->fetch(PDO::FETCH_NUM)) {
        echo " <tr>\n" .
              "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .
              "  <td>$salary</td>\n" .
              " </tr>\n";
    }

<?>

</table>

Example #3 Using nested list()

<?php >

    list($a, list($b, $c)) = array(1, array(2, 3));

    var_dump($a, $b, $c);

<?>

int(1)
int(2)
int(3)

Example #4 Using list() with array indices

<?php >

    $info = array('coffee', 'brown', 'caffeine');

    list($a[0], $a[1], $a[2]) = $info;

    var_dump($a);

<?>

Gives the following output (note the order of the elements compared in which
order they were written in the list() syntax):

array(3) {
  [2]=>
  string(8) "caffeine"
  [1]=>
  string(5) "brown"
  [0]=>
  string(6) "coffee"
}

==============================================================================
*Notes*

Warning

In PHP 5, list() assigns the values starting with the right-most parameter. In
PHP 7, list() starts with the left-most parameter.

If you are using plain variables, you don't have to worry about this. But if
you are using arrays with indices you usually expect the order of the indices
in the array the same you wrote in the list() from left to right, which is not
the case in PHP 5, as it's assigned in the reverse order.

Generally speaking, it is advisable to avoid relying on a specific order of
operation, as this may change again in the future.

Warning

Modification of the array during list() execution (e.g. using list($a, $b) =
$b) results in undefined behavior.

    Note:

    list() only works on numerical arrays and assumes the numerical indices
    start at 0.

==============================================================================
*See* *Also*

  * |each| - Return the current key and value pair from an array and advance
    the array cursor
  * |array| - Create an array
  * |extract| - Import variables into the current symbol table from an array


vim:ft=help: