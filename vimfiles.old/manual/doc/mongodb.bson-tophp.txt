MongoDB\BSON\toPHP

(mongodb >=1.0.0)

MongoDB\BSON\toPHP â€” Returns the PHP representation of a BSON value

==============================================================================
*Description*

    array|object MongoDB\BSON\toPHP ( string $bson [, array $typeMap =~
    array() ] )~

Unserializes a BSON document (i.e. binary string) to its PHP representation.
The {typeMap} paramater may be used to control the PHP types used for
converting BSON arrays and documents (both root and embedded).

==============================================================================
*Parameters*

{bson} (string)

    BSON value to be unserialized.

{typeMap} (array)

    Type map configuration.

==============================================================================
*Return* *Values*

The unserialized PHP value.

==============================================================================
*Errors/Exceptions*

Throws MongoDB\Driver\Exception\InvalidArgumentException if a class in the
type map cannot be instantiated or does not implement MongoDB\BSON\
Unserializable.

Throws MongoDB\Driver\Exception\UnexpectedValueException if the input did not
contain exactly one BSON document. Possible reasons include, but are not
limited to, invalid BSON, extra data (after reading one BSON document), or an
unexpected >> libbson error.

==============================================================================
*Examples*

Example #1 MongoDB\BSON\toPHP() example

<?php >

    $bson = hex2bin('0e00000010666f6f000100000000');
    $value = MongoDB\BSON\toPHP($bson);
    var_dump($value);

<?>

The above example will output:

object(stdClass)#1 (1) {
  ["foo"]=>
  int(1)
}

==============================================================================
*See* *Also*

  * MongoDB\BSON\fromPHP() - Returns the BSON representation of a PHP value
  * >> MongoDB BSON
  * Persisting Data


vim:ft=help: